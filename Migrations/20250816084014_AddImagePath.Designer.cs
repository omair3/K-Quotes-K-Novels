// <auto-generated />
using KQuotesNovels.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KQuotesNovels.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250816084014_AddImagePath")]
    partial class AddImagePath
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KQuotesNovels.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Drama", b =>
                {
                    b.Property<int>("DramaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DramaId"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("DramaId");

                    b.ToTable("Dramas");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Mood", b =>
                {
                    b.Property<int>("MoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoodId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MoodId");

                    b.ToTable("Moods");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Novel", b =>
                {
                    b.Property<int>("NovelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NovelId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("NovelId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Novels");
                });

            modelBuilder.Entity("KQuotesNovels.Models.NovelDrama", b =>
                {
                    b.Property<int>("NovelId")
                        .HasColumnType("int");

                    b.Property<int>("DramaId")
                        .HasColumnType("int");

                    b.HasKey("NovelId", "DramaId");

                    b.HasIndex("DramaId");

                    b.ToTable("NovelDramas");
                });

            modelBuilder.Entity("KQuotesNovels.Models.NovelGenre", b =>
                {
                    b.Property<int>("NovelId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("NovelId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("NovelGenres");
                });

            modelBuilder.Entity("KQuotesNovels.Models.NovelQuote", b =>
                {
                    b.Property<int>("NovelId")
                        .HasColumnType("int");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.HasKey("NovelId", "QuoteId");

                    b.HasIndex("QuoteId");

                    b.ToTable("NovelQuotes");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Quote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteId"));

                    b.Property<int>("DramaId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)");

                    b.HasKey("QuoteId");

                    b.HasIndex("DramaId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("KQuotesNovels.Models.QuoteMood", b =>
                {
                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.HasKey("QuoteId", "MoodId");

                    b.HasIndex("MoodId");

                    b.ToTable("QuoteMoods");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Novel", b =>
                {
                    b.HasOne("KQuotesNovels.Models.Author", "Author")
                        .WithMany("Novels")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("KQuotesNovels.Models.NovelDrama", b =>
                {
                    b.HasOne("KQuotesNovels.Models.Drama", "Drama")
                        .WithMany("NovelDramas")
                        .HasForeignKey("DramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KQuotesNovels.Models.Novel", "Novel")
                        .WithMany("NovelDramas")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drama");

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("KQuotesNovels.Models.NovelGenre", b =>
                {
                    b.HasOne("KQuotesNovels.Models.Genre", "Genre")
                        .WithMany("NovelGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KQuotesNovels.Models.Novel", "Novel")
                        .WithMany("NovelGenres")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("KQuotesNovels.Models.NovelQuote", b =>
                {
                    b.HasOne("KQuotesNovels.Models.Novel", "Novel")
                        .WithMany("NovelQuotes")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KQuotesNovels.Models.Quote", "Quote")
                        .WithMany("NovelQuotes")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Novel");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Quote", b =>
                {
                    b.HasOne("KQuotesNovels.Models.Drama", "Drama")
                        .WithMany("Quotes")
                        .HasForeignKey("DramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drama");
                });

            modelBuilder.Entity("KQuotesNovels.Models.QuoteMood", b =>
                {
                    b.HasOne("KQuotesNovels.Models.Mood", "Mood")
                        .WithMany("QuoteMoods")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KQuotesNovels.Models.Quote", "Quote")
                        .WithMany("QuoteMoods")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mood");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Author", b =>
                {
                    b.Navigation("Novels");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Drama", b =>
                {
                    b.Navigation("NovelDramas");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Genre", b =>
                {
                    b.Navigation("NovelGenres");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Mood", b =>
                {
                    b.Navigation("QuoteMoods");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Novel", b =>
                {
                    b.Navigation("NovelDramas");

                    b.Navigation("NovelGenres");

                    b.Navigation("NovelQuotes");
                });

            modelBuilder.Entity("KQuotesNovels.Models.Quote", b =>
                {
                    b.Navigation("NovelQuotes");

                    b.Navigation("QuoteMoods");
                });
#pragma warning restore 612, 618
        }
    }
}
